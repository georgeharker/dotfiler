#!/usr/bin/zsh
#
# Dotfiles Installation Script Template
# 
# This script sets up a complete development environment by:
# - Installing system packages and tools
# - Setting up development languages and runtimes
# - Installing fonts and terminal utilities
# - Configuring development tools and editors
#
# Usage: ./install.sh
#

# Detect operating system and branch accordingly
if [[ `uname` != "Darwin" ]]; then
    echo "Linux installation starting..."
    
    # ================================
    # Linux Installation Section
    # ================================
    
    # Create necessary directories
    mkdir -p ~/bin
    mkdir -p ~/ext
    mkdir -p ~/ext/deb  # For custom .deb packages
    
    # System package manager updates
    sudo apt-get update
    
    # --------------------------------
    # Core System Tools
    # --------------------------------
    sudo apt-get install -y curl
    sudo apt-get install -y git
    sudo apt-get install -y build-essential
    sudo apt-get install -y cmake
    sudo apt-get install -y pkg-config
    
    # --------------------------------
    # Development Languages
    # --------------------------------
    # Python setup
    sudo apt-get install -y python3
    sudo apt-get install -y python3-venv
    sudo apt-get install -y python3-pip
    
    # Node.js setup
    sudo apt-get install -y nodejs
    sudo apt-get install -y npm
    
    # Other languages as needed
    # sudo apt-get install -y [language-specific packages]
    
    # --------------------------------
    # Terminal and CLI Tools
    # --------------------------------
    sudo apt-get install -y ripgrep
    sudo apt-get install -y bat
    sudo apt-get install -y xsel  # X11 clipboard support
    
    # Install fzf from source for latest version
    if [[ ! -d ~/.fzf ]]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
        ~/.fzf/install --bin --no-update-rc
    fi
    
    # --------------------------------
    # Custom Builds (Advanced)
    # --------------------------------
    # Example: Custom tmux build
    # if [[ ! -f ~/ext/custom-software/package.deb ]]; then
    #     echo "Building custom software..."
    #     pushd ~/ext/
    #     # Custom build process here
    #     popd
    # fi
    # sudo dpkg -i ~/ext/custom-software/package.deb
    
    # --------------------------------
    # Authentication and Security
    # --------------------------------
    # GitHub CLI
    sudo apt-get install -y gh
    
    # Password manager CLI (example: 1Password)
    # if ! command -v op &> /dev/null; then
    #     # Add repository and install
    #     # [Repository setup commands]
    #     sudo apt install password-manager-cli
    # fi
    
    # --------------------------------
    # Fonts Installation
    # --------------------------------
    echo "Installing fonts..."
    cd /tmp/
    # Download and install nerd fonts
    curl -OL https://github.com/ryanoasis/nerd-fonts/releases/download/v3.x.x/FontName.tar.xz
    mkdir -p ~/.local/share/fonts
    tar xvf FontName.tar.xz -d ~/.local/share/fonts/
    cd ~/.local/share/fonts
    rm *Windows*  # Remove Windows-specific variants
    fc-cache -fv  # Rebuild font cache
    
    # --------------------------------
    # Development Environment Setup
    # --------------------------------
    # Editor setup (example: Neovim)
    # Custom installation if needed
    
    echo "Linux installation complete!"

else
    echo "macOS installation starting..."
    
    # ================================
    # macOS Installation Section  
    # ================================
    
    # Install Homebrew if not present
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # --------------------------------
    # Fonts via Homebrew
    # --------------------------------
    brew tap homebrew/cask-fonts
    brew install font-meslo-lg-nerd-font
    # Add other fonts as needed
    
    # --------------------------------
    # Development Tools
    # --------------------------------
    brew install git
    brew install fzf
    brew install ripgrep
    brew install tmux
    brew install bat
    brew install python3
    brew install node
    brew install neovim
    
    # --------------------------------
    # CLI Tools and Utilities
    # --------------------------------
    brew install gh              # GitHub CLI
    brew install 1password-cli   # Password manager
    
    # --------------------------------
    # GUI Applications
    # --------------------------------
    brew install --cask terminal-app
    # Add other GUI apps as needed
    
    echo "macOS installation complete!"
fi

# ================================
# Cross-Platform Setup
# ================================

echo "Setting up cross-platform components..."

# Refresh shell
rehash

# --------------------------------
# Python Virtual Environment
# --------------------------------
cd ~/
python3 -m venv ~/.venv
source ~/.venv/bin/activate

# Python packages for development
echo "Installing Python packages..."
pip3 install mypy
pip3 install pynvim
pip3 install 'python-lsp-server[all]'
pip3 install flake8 flake8-bugbear flake8-comprehensions

# --------------------------------
# Shell Framework (Oh My Zsh)
# --------------------------------
echo "Installing Oh My Zsh..."
if [[ ! -d ~/.oh-my-zsh ]]; then
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
    echo "Oh My Zsh already installed"
fi

# --------------------------------
# Terminal Multiplexer Setup
# --------------------------------
echo "Setting up tmux..."
if [[ ! -d ~/.tmux/plugins/tpm ]]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# --------------------------------
# Rust Toolchain
# --------------------------------
echo "Installing Rust..."
if ! command -v cargo &> /dev/null; then
    curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --default-toolchain stable --profile default -y
    source ~/.cargo/env
    rustup install stable
    rustup default stable
fi

# Rust packages
cargo install git-delta

# --------------------------------
# Node.js Global Packages
# --------------------------------
echo "Installing Node.js global packages..."
# npm install -g [package-list]

# --------------------------------
# Editor Setup
# --------------------------------
echo "Setting up editor..."
# Example: Neovim plugin setup
sudo npm -g install tree-sitter-cli
nvim --headless -c 'Lazy install' -c ":q"

# --------------------------------
# Final Setup Steps
# --------------------------------
echo "Running final setup..."
# bat cache --build
# Other post-installation commands

echo ""
echo "============================================"
echo "Installation complete!"
echo "============================================"
echo ""
echo "Next steps:"
echo "1. Run: source ~/.zshrc (or restart terminal)"
echo "2. Run: ./setup.sh -s (to copy existing dotfiles)"
echo "3. Run: ./setup.sh -u (to create symlinks)"
echo "4. Configure your tools and restart terminal"
echo ""
echo "For automatic updates, add to ~/.zshrc:"
echo "  source ~/.dotfiles/check_update.sh"
echo ""